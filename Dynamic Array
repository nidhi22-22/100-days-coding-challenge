#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function declarations
char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);
int parse_int(char*);

// Function to implement the dynamic array logic
int* dynamicArray(int n, int queries_rows, int queries_columns, int** queries, int* result_count) {
    int** arr = (int**)calloc(n, sizeof(int*));  // Array of pointers initialized to NULL
    int* sizes = (int*)calloc(n, sizeof(int));   // Array to track the sizes of the inner arrays

    int lastAnswer = 0;
    int* results = (int*)malloc(queries_rows * sizeof(int)); // Stores lastAnswer results
    int resIndex = 0;

    for (int i = 0; i < queries_rows; i++) {
        int type = queries[i][0];
        int x = queries[i][1];
        int y = queries[i][2];

        int index = (x ^ lastAnswer) % n;

        if (type == 1) {
            // Append y to arr[index]
            sizes[index]++;
            arr[index] = (int*)realloc(arr[index], sizes[index] * sizeof(int));
            arr[index][sizes[index] - 1] = y;
        } else if (type == 2) {
            if (sizes[index] > 0) {  // Ensure the index is valid
                lastAnswer = arr[index][y % sizes[index]];
                results[resIndex++] = lastAnswer;
            }
        }
    }

    *result_count = resIndex;

    // Free dynamically allocated memory
    for (int i = 0; i < n; i++) {
        free(arr[i]);
    }
    free(arr);
    free(sizes);

    return results;
}

int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");
    if (!fptr) {
        fprintf(stderr, "Error opening output file\n");
        return EXIT_FAILURE;
    }

    char** first_multiple_input = split_string(rtrim(readline()));
    int n = parse_int(first_multiple_input[0]);
    int q = parse_int(first_multiple_input[1]);

    int** queries = (int**)malloc(q * sizeof(int*));
    if (!queries) {
        fprintf(stderr, "Memory allocation failed for queries\n");
        return EXIT_FAILURE;
    }

    for (int i = 0; i < q; i++) {
        queries[i] = (int*)malloc(3 * sizeof(int));
        char** queries_item_temp = split_string(rtrim(readline()));

        for (int j = 0; j < 3; j++) {
            queries[i][j] = parse_int(queries_item_temp[j]);
        }
    }

    int result_count;
    int* result = dynamicArray(n, q, 3, queries, &result_count);

    for (int i = 0; i < result_count; i++) {
        fprintf(fptr, "%d", result[i]);
        if (i != result_count - 1) {
            fprintf(fptr, "\n");
        }
    }
    fprintf(fptr, "\n");

    // Free allocated memory
    for (int i = 0; i < q; i++) {
        free(queries[i]);
    }
    free(queries);
    free(result);

    fclose(fptr);
    return 0;
}

// Function to read a line from standard input
char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);
    if (!data) {
        return NULL;
    }

    while (true) {
        char* cursor = data + data_length;
        if (!fgets(cursor, alloc_length - data_length, stdin)) {
            break;
        }

        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) {
            return NULL;
        }
    }

    if (data_length > 0 && data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    return data;
}

// Function to remove leading whitespace
char* ltrim(char* str) {
    if (!str) return NULL;
    while (*str && isspace(*str)) {
        str++;
    }
    return str;
}

// Function to remove trailing whitespace
char* rtrim(char* str) {
    if (!str) return NULL;
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) {
        end--;
    }
    *(end + 1) = '\0';
    return str;
}

// Function to split a string into an array of tokens
char** split_string(char* str) {
    char** splits = NULL;
    int spaces = 0;
    char* token = strtok(str, " ");

    while (token) {
        splits = realloc(splits, sizeof(char*) * (spaces + 1));
        if (!splits) {
            return NULL;
        }
        splits[spaces++] = token;
        token = strtok(NULL, " ");
    }

    return splits;
}

// Function to parse an integer safely
int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }
    return value;
}
